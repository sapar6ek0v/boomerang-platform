// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Order {
    id         String  @id @default(cuid())
    courierId  String
    courier Courier @relation(fields: [courierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    restaurant String
    branch     String
    comment    String?
    price      Int
    orderPlace String
    orderPrice Int
    categories CategoriesOnOrder[]
}

model Courier {
    id String @id @default(cuid())
    firstName String
    lastName String
    email String?
    orders Order[]
}

model Restaurant {
    id String @id @default(cuid())
    name String
    branches RestaurantBranch[]
}

model RestaurantBranch {
    id String @id @default(cuid())
    branchName String
    restaurantId String
    restaurant Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category{
    id String @id @default(cuid())
    name  String
    orders CategoriesOnOrder[]
}

model CategoriesOnOrder{
    order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId    String 
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String 
    assignedAt DateTime @default(now())
    assignedBy String

    @@id([orderId, categoryId])
}